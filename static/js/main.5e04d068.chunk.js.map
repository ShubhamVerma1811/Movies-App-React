{"version":3,"sources":["components/MoviesInfo.js","components/NowPlaying.js","components/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["MoviesInfo","match","useState","resData","setResData","a","fetch","params","id","process","res","json","data","console","log","useEffect","movieInfo","className","href","title","release_date","src","poster_path","alt","overview","NowPlaying","nowPlaying","setNowPlaying","then","results","length","map","item","key","to","substring","SearchBox","query","setQuery","setData","setRes","response","receivedData","total_results","undefined","getSearchedMovieData","type","onChange","e","target","value","placeholder","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e04d068.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/MoviesInfo/MoviesInfo.css\";\r\n\r\nfunction MoviesInfo({ match }) {\r\n  const [resData, setResData] = useState({});\r\n\r\n  useEffect(() => {\r\n    movieInfo();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [match.params.id]);\r\n\r\n  async function movieInfo() {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.themoviedb.org/3/movie/${match.params.id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\r\n      );\r\n      const data = await res.json();\r\n      setResData(data);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"movieContainer\">\r\n      <a href=\"/#/\">\r\n        <button> &#8592; Go Back</button>\r\n      </a>\r\n      <div className=\"movieContent\">\r\n        <h1>{resData.title} </h1>\r\n        <p>Release Date : {resData.release_date}</p>\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500${resData.poster_path}`}\r\n          alt=\"pic\"\r\n        />\r\n        <p>{resData.overview} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoviesInfo;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../styles/NowPlaying/NowPlaying.css\";\r\n\r\nfunction NowPlaying() {\r\n  const [nowPlaying, setNowPlaying] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://api.themoviedb.org/3/movie/now_playing?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => setNowPlaying([...nowPlaying, data.results]));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (nowPlaying.length > 0) {\r\n    return (\r\n      <div className=\"nowPlaying\">\r\n        <center>\r\n          <h1>Now Playing</h1>\r\n        </center>\r\n        <div className=\"nowContainer\">\r\n          {nowPlaying[0].map((item) => (\r\n            <Link key={item.id} to={`/movies/${item.id}`}>\r\n              <div className=\"nowCard\">\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w500${item.poster_path}`}\r\n                  alt=\"pic\"\r\n                />\r\n                <h2>{item.title} </h2>\r\n                <p> {item.release_date} </p>\r\n                <p>{item.overview.substring(0, 100)}...</p>\r\n              </div>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <h1>Loading..</h1>;\r\n  }\r\n}\r\n\r\nexport default NowPlaying;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/SearchBox/SearchBox.css\";\r\n\r\nfunction SearchBox() {\r\n  const [query, setQuery] = useState();\r\n  const [data, setData] = useState([]);\r\n  const [res, setRes] = useState();\r\n\r\n  function showData(e) {\r\n    setQuery(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (query !== undefined) {\r\n      getSearchedMovieData();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [query]);\r\n\r\n  async function getSearchedMovieData() {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${query}`\r\n      );\r\n      const receivedData = await response.json();\r\n      setRes(receivedData.total_results);\r\n      setData(receivedData.results);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"searchContainer\">\r\n      <div>\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            onChange={showData}\r\n            placeholder=\"Enter Movie Name\"\r\n          />\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"searchDropDownContainer\">\r\n        {data !== undefined && res > 0 ? (\r\n          data.map((item) => (\r\n            <div key={item.id} className=\"searchDropDown\">\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w500${item.poster_path}`}\r\n                alt=\"pic-not-found\"\r\n              />\r\n              <div className=\"searchInfo\">\r\n                <h3> {item.title}</h3>\r\n                <p>{item.release_date} </p>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : res === 0 ? (\r\n          <h3>Movie Not found.Please Try Again</h3>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport MoviesInfo from \"./components/MoviesInfo\";\nimport NowPlaying from \"./components/NowPlaying\";\nimport SearchBox from \"./components/SearchBox\";\n\nfunction App() {\n  return (\n    <div>\n      <SearchBox />\n      <Router>\n        <Route path=\"/\" exact component={NowPlaying} />\n        <Route path=\"/movies/:id\" component={MoviesInfo}></Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}